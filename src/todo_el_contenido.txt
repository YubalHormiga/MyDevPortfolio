

--- File: App.vue ---

<script setup>
import { ref, onMounted, watch } from 'vue'
import { RouterView, useRoute } from 'vue-router'
import NavigationBar from './components/NavigationBar.vue'
import FooterView from './views/FooterView.vue'
import MainView from './views/MainView.vue'

const route = useRoute()

const hasScrolled = ref(false)

const handleScroll = () => {
  if (window.scrollY > 100) {
    hasScrolled.value = true
  }
}
watch(route, () => {
  window.scrollTo(0, 0)
})
onMounted(() => {
  window.addEventListener('scroll', handleScroll)
})
</script>

<template>
  <header class="header">
    <NavigationBar />
  </header>
  <div class="container">
    <Transition name="slide-left">
      <RouterView />
    </Transition>
    <div v-show="!hasScrolled" class="spacer"></div>

    <Transition name="slide-left">
      <main v-if="route.name === 'home' && hasScrolled" class="main">
        <MainView />
      </main>
    </Transition>
  </div>
  <footer v-if="hasScrolled" class="footer">
    <FooterView />
  </footer>
</template>

<style scoped>
.header,
.footer {
  width: 95%;
  margin: 0 auto;
  max-width: var(--max-width);
}
.container {
  display: grid;
  min-height: 100dvh;
  grid-template-rows: auto 1fr auto;
  overflow-y: hidden;
}

.slide-left-enter-active,
.slide-left-leave-active {
  transition: transform 1s ease-out;
}

.slide-left-enter-from {
  transform: translateX(-100%);
}

.slide-left-enter-to {
  transform: translateX(0);
}

.slide-left-leave-from {
  transform: translateX(0);
}

.slide-left-leave-to {
  transform: translateX(-100%);
}

.spacer {
  height: 100rem;
  width: 100%;
}
</style>



--- File: assets\icons\dark_mode.svg ---
(Skipped (non-matching extension))


--- File: assets\icons\light_mode.svg ---
(Skipped (non-matching extension))


--- File: assets\images\favicon.png ---
(Skipped (non-matching extension))


--- File: assets\images\mi-foto.png ---
(Skipped (non-matching extension))


--- File: assets\main.css ---
(Skipped (non-matching extension))


--- File: components\CanineConnectDetails.vue ---

<script setup></script>

<template>
  <h1>CAnineConnect</h1>
</template>
<style scoped></style>



--- File: components\ContactSection.vue ---

<template>
  <section class="InfoContainer">
    <div class="contactInfo">
      <h3>Estás buscando un desarrollador junior para tu equipo?</h3>
      <p>
        Soy un desarrollador junior buscando mi primer empleo en el mundo del desarrollo web. Si
        tienes un proyecto en mente o crees que puedo ser útil, ¡hablemos!
      </p>
      <a href="mailto:yubalhh@gmail.com" class="emailLink"> yubalhh@gmail.com </a>
    </div>
  </section>
</template>

<style scoped>
.InfoContainer {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  padding: 10rem 0 0 0;
}

.contactInfo h3 {
  font-weight: 100;
  margin-bottom: 1.5rem;
}

.emailLink {
  display: flex;
  align-items: center;
  font-size: 2rem;
  font-weight: 700;
  margin-top: 3rem;
  color: var(--primary-dark);
}

.marginBottomSm {
  margin-bottom: 8px;
}

.marginBottomLg {
  margin-bottom: 16px;
}
</style>



--- File: components\HeroSection.vue ---

<script setup></script>

<template>
  <div class="hero-section">
    <h1 class="hero-title">
      <span class="hero-title-name">Hi! I’m <span>Yubal</span>,</span>
      <span class="hero-title-role">
        a Junior Full Stack <br />
        Web Developer
      </span>
    </h1>
  </div>
</template>

<style scoped>
.hero-section {
  margin-top: 5rem;
  text-align: left;
  font-family: 'Bangers', serif;
  letter-spacing: 3px;
  padding-left: 4px;
}

.hero-title {
  font-size: 8rem;
  font-weight: bold;
  margin-bottom: 1rem;
  line-height: 1.4;
  display: flex;
  flex-direction: column;
}

.hero-title-name,
.hero-title-role {
  display: block;
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 1s forwards;
}

.hero-title-name {
  animation-delay: 0.2s;
}
.hero-title-name span {
  color: var(--primary-dark);
}

.hero-title-role {
  animation-delay: 0.5s;
}
@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .hero-title {
    font-size: 4rem;
  }
}
</style>



--- File: components\NavigationBar.vue ---

<script setup>
import { onMounted, ref } from 'vue'
import ThemeToggle from './ThemeTogle.vue'

const emailVisible = ref(false)
const copiedMessageVisible = ref(false)
const navVisible = ref(false)

const copyEmail = () => {
  navigator.clipboard.writeText('yubalhh@gmail.com')
  copiedMessageVisible.value = true
  setTimeout(() => {
    copiedMessageVisible.value = false
  }, 2000)
}

onMounted(() => {
  navVisible.value = true
})
</script>

<template>
  <Transition name="fade-scale" mode="out-in">
    <nav v-if="navVisible">
      <div class="logo">
        <RouterLink to="/">
          <span class="letter y">Y</span>
          <span class="letter h1">H</span>
          <span class="letter h2">H</span>
        </RouterLink>
      </div>

      <div class="ready-work" @mouseenter="emailVisible = true" @mouseleave="emailVisible = false">
        <span v-if="!emailVisible" class="fade-text">Ready to work!</span>
        <span v-else class="email fade-text" @click="copyEmail"> yubalhh@gmail.com </span>
        <Transition name="fade-opacity">
          <div v-if="copiedMessageVisible" class="copied-message">Copied!</div>
        </Transition>
      </div>

      <div>
        <ThemeToggle />
      </div>
    </nav>
  </Transition>
</template>

<style scoped>
.fade-scale-enter-active,
.fade-scale-leave-active {
  transition:
    opacity 1.5s cubic-bezier(0.25, 1, 0.5, 1),
    transform 1.5s cubic-bezier(0.25, 1, 0.5, 1);
}

.fade-scale-enter-from,
.fade-scale-leave-to {
  opacity: 0;
  transform: scale(0.3);
}

.fade-opacity-enter-active,
.fade-opacity-leave-active {
  transition: opacity 0.5s ease;
}

.fade-opacity-enter-from,
.fade-opacity-leave-to {
  opacity: 0;
}

.fade-text {
  display: inline-block;
  transition:
    opacity 0.5s ease,
    transform 0.5s ease;
}

.fade-text:hover {
  transform: scale(1.1);
  opacity: 0.8;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 2rem 0;
  font-family: 'Bangers', serif;
  letter-spacing: 3px;
  padding: 0 0 0 3px;
}

.logo {
  position: relative;
  font-weight: 900;
  font-size: 5rem;
  display: inline-block;
  transition: color 0.3s ease;
}

.letter {
  display: inline-block;
  transition: color 0.3s ease;
}

.y {
  z-index: 1;
}

.h1 {
  position: absolute;
  left: 1.8rem;
  top: 0;
  z-index: 2;
}

.h2 {
  position: absolute;
  left: 3rem;
  top: 0;
  z-index: 3;
}

.ready-work {
  display: flex;
  gap: 1rem;
  cursor: pointer;
  padding: 1rem;
  font-weight: 700;
  transition:
    transform 0.3s ease,
    background-color 0.3s ease;
}

@media (max-width: 768px) {
  .ready-work {
    display: none;
  }
}

.ready-work:hover {
  transform: scale(1.05);
}
.email {
  color: var(--secundary-dark);
}
.copied-message {
  margin-left: 2rem;
  transition:
    opacity 0.5s ease,
    transform 0.5s ease;
  opacity: 1;
  transform: scale(1);
}

.copied-message {
  text-align: center;
  color: var(--tertiary-dark);
}

.copied-message:leave {
  opacity: 0;
  transform: scale(0.8);
}
</style>



--- File: components\ProjectNavegation.vue ---

<script setup>
import { ref, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import ProjectNavegation from './ProjectNavegation.vue'

const showButtons = ref(false)

const router = useRouter()

const route = useRoute()

// Lógica para mostrar los botones de "Anterior" y "Siguiente" tras la transición del proyecto
const handleProjectClick = () => {
  showButtons.value = true
}

// Navegar entre los proyectos
const navigateToProject = (projectName) => {
  router.push({ name: projectName })
}

// Lógica para mover a proyectos anteriores y siguientes
const handlePreviousProject = () => {
  if (route.name === 'canineconnect') {
    navigateToProject('techmix')
  } else if (route.name === 'watersportworld') {
    navigateToProject('canineconnect')
  } else if (route.name === 'techmix') {
    navigateToProject('watersportworld')
  }
}

const handleNextProject = () => {
  if (route.name === 'canineconnect') {
    navigateToProject('watersportworld')
  } else if (route.name === 'watersportworld') {
    navigateToProject('techmix')
  } else if (route.name === 'techmix') {
    navigateToProject('canineconnect')
  }
}

onMounted(() => {
  showButtons.value = false // Inicialmente los botones están ocultos
})
</script>

<template>
  <h1>{{ route.name }}</h1>

  <!-- Transición para mostrar el contenido del proyecto -->
  <Transition name="fade-scale" mode="out-in">
    <ProjectNavegation @click="handleProjectClick" />
  </Transition>

  <!-- Botones con transición controlada -->
  <Transition name="fade-buttons">
    <div v-if="showButtons" class="project-buttons">
      <button @click="handlePreviousProject">Anterior</button>
      <button @click="handleNextProject">Siguiente</button>
    </div>
  </Transition>
</template>

<style scoped>
/* Transición para el contenido del proyecto */
.fade-scale-enter-active,
.fade-scale-leave-active {
  transition:
    opacity 1.5s cubic-bezier(0.25, 1, 0.5, 1),
    transform 1.5s cubic-bezier(0.25, 1, 0.5, 1);
}

.fade-scale-enter-from,
.fade-scale-leave-to {
  opacity: 0;
  transform: scale(0.3);
}

/* Transición para los botones */
.fade-buttons-enter-active,
.fade-buttons-leave-active {
  transition: opacity 1s ease-in-out;
}

.fade-buttons-enter-from,
.fade-buttons-leave-to {
  opacity: 0;
}

.project-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.project-buttons button {
  padding: 0.5rem 1rem;
  background-color: var(--primary-dark);
  color: white;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.project-buttons button:hover {
  background-color: var(--tertiary-dark);
}
</style>



--- File: components\ProjectOverviewSection.vue ---

<script setup>
import { useRouter } from 'vue-router'
import ContactSection from './ContactSection.vue'

const router = useRouter()

const navigateToProject = (projecName) => {
  router.push({ name: projecName })
}
</script>

<template>
  <section class="projectsSection compactPadding">
    <h2 class="sectionTitle">Proyectos</h2>
    <h2 class="sectionTitle details">Detalles</h2>
  </section>

  <section class="projectsSection">
    <h2 class="projectTitle" @click="navigateToProject('canineconnect')">CanineConnect</h2>
    <div class="projectDescription">
      <p>
        Plataforma web que conecta a amantes de los perros con refugios para facilitar adopciones y
        reportar mascotas perdidas.
      </p>
    </div>
  </section>
  <section class="projectsSection">
    <h2 class="projectTitle" @click="navigateToProject('watersportworld')">WaterSportWorld</h2>
    <div class="projectDescription">
      <p>Proyecto Full Stack para la gestión de reservas de actividades acuáticas.</p>
    </div>
  </section>
  <section class="projectsSection">
    <h2 class="projectTitle" @click="navigateToProject('techmix')">TechMix</h2>
    <div class="projectDescription">
      <p>
        Ecosistema de proyectos y ejercicios diseñados para aprender y dominar Vue.js, desde
        componentes básicos hasta gestión avanzada de estados y estructuras complejas.
      </p>
    </div>
  </section>

  <ContactSection />
</template>

<style scoped>
.projectsSection {
  display: grid;
  grid-template-columns: 5fr 4fr;
  padding: 4rem 0;
  align-items: center;
  gap: 2rem;
  border-bottom: 1px solid var(--secundary-dark);
  margin: 0 auto;
}

.projectsSection.compactPadding {
  padding: 2rem 0; /* Aplica padding más pequeño */
}

.sectionTitle {
  font-family: 'Wendy One', serif;
  letter-spacing: 2px;
}

@media (max-width: 1200px) {
  .projectsSection {
    grid-template-columns: 1fr;
  }
  .details {
    display: none;
  }
}

.projectTitle {
  font-size: 7rem;
  cursor: pointer;
  font-family: 'Wendy One', serif;
  margin-bottom: 0.5rem;
  color: var(--primary-dark);
  transition: color 0.3s ease;
  padding-left: 3px;
}

.projectTitle:hover {
  color: var(--tertiary-dark);
}

[data-theme='light'] .projectTitle:hover {
  color: var(--primary-ligth);
}

@media (max-width: 768px) {
  .projectTitle {
    font-size: 4rem;
  }
}
</style>



--- File: components\TechMixDetails.vue ---

<script setup></script>

<template>
  <h1>TechMix</h1>
</template>
<style scoped></style>



--- File: components\ThemeTogle.vue ---

<script setup>
import { ref, onMounted } from 'vue'
import darkModeIcon from '@/assets/icons/dark_mode.svg'
import lightModeIcon from '@/assets/icons/light_mode.svg'

const isDarkMode = ref(localStorage.getItem('theme') !== 'light')

const toggleTheme = () => {
  isDarkMode.value = !isDarkMode.value
  const theme = isDarkMode.value ? 'dark' : 'light'
  document.documentElement.setAttribute('data-theme', theme)
  localStorage.setItem('theme', theme)
}

onMounted(() => {
  document.documentElement.setAttribute('data-theme', isDarkMode.value ? 'dark' : 'light')
})
</script>

<template>
  <button @click="toggleTheme" aria-label="Toggle Theme">
    <img :src="isDarkMode ? darkModeIcon : lightModeIcon" alt="Theme Icon" />
  </button>
</template>

<style scoped>
button {
  background: none;
  border: none;
  cursor: pointer;
}

img {
  width: 44px;
  height: 24px;
}
</style>



--- File: components\WaterSportWorldDetails.vue ---

<script setup></script>

<template>
  <h1>WaterSportWorld</h1>
</template>
<style scoped></style>



--- File: main.js ---

import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(router)

app.mount('#app')



--- File: router\index.js ---

import { createRouter, createWebHistory } from 'vue-router'
import HeroSection from '../components/HeroSection.vue'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'home',
      component: HeroSection,
    },
    {
      path: '/about',
      name: 'about',
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import('../views/AboutView.vue'),
    },
    {
      path: '/project/canineconnect',
      name: 'canineconnect',
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import('../components/CanineConnectDetails.vue'),
    },
    {
      path: '/project/watersportworld',
      name: 'watersportworld',
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import('../components/WaterSportWorldDetails.vue'),
    },
    {
      path: '/project/techmix',
      name: 'techmix',
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import('../components/TechMixDetails.vue'),
    },
  ],
})

export default router



--- File: todo_el_contenido.txt ---
(Skipped (non-matching extension))


--- File: views\AboutView.vue ---

<script setup></script>

<template>
  <div class="aboutContainer">
    <div>
      <div class="profilePhotoContainer">
        <div class="profilePhoto">
          <img src="../assets//images/mi-foto.png" alt="Foto de Yubal Hormiga" />
        </div>
        <div class="aboutMe">
          <h3>Sobre <span> mí</span></h3>
        </div>
      </div>
    </div>
    <div class="bio">
      <p>
        Soy Yubal Hormiga, un desarrollador web Full Stack apasionado por la tecnología y con un
        enfoque constante en la mejora y el aprendizaje. Tras completar un bootcamp intensivo de
        desarrollo web en NEOLAND, he adquirido habilidades en tecnologías clave como HTML5, CSS3,
        JavaScript, Vue.js, Node.js y MongoDB. Mi experiencia previa en análisis de datos, gestión
        de proyectos y atención al cliente me ha permitido desarrollar una fuerte capacidad para
        resolver problemas, pensar de manera crítica y trabajar de forma colaborativa.
      </p>
      <p>
        En el camino hacia la transición al desarrollo web, he demostrado ser una persona
        responsable, adaptable y proactiva, con un fuerte compromiso en ofrecer soluciones
        tecnológicas eficientes y escalables. Mi objetivo es contribuir con mis habilidades técnicas
        y mi experiencia en gestión para impulsar proyectos innovadores, al mismo tiempo que
        continúo aprendiendo y creciendo dentro del mundo de la programación.
      </p>
      <p>
        Actualmente, estoy buscando un puesto como desarrollador web junior donde pueda aplicar mis
        conocimientos adquiridos, trabajar en equipo y seguir creciendo en el sector tecnológico.
      </p>
    </div>
  </div>
</template>

<style scoped>
.aboutContainer {
  display: flex;
  flex-direction: column;
  gap: 5rem;
}
.profilePhotoContainer {
  display: flex;
  flex-direction: column;
  gap: 3rem;
}
@media (min-width: 768px) {
  .profilePhotoContainer {
    flex-direction: row;
    align-items: center;
  }
}
.profilePhoto {
  display: flex;
  justify-content: center;
}
.aboutMe {
  display: flex;
  text-transform: uppercase;
}
.aboutMe h3,
.aboutMe span {
  display: block;
  font-size: 8rem;
  font-weight: bold;
}
p {
  font-size: 1.1em;
  line-height: 1.6;
  margin-bottom: 3rem;
}
</style>



--- File: views\FooterView.vue ---

<script setup>
const currentYear = new Date().getFullYear()
</script>

<template>
  <div class="footerContainer">
    <div class="footerWrapper">
      <div class="aboutSection">
        <div class="aboutLink">
          <RouterLink to="/about">
            <a class="link">About</a>
          </RouterLink>
        </div>
        <div class="linkedinLink">
          <a href="https://www.linkedin.com/in/yubal-hormiga/" target="_blank">Linkedin</a>
        </div>
        <div class="githubLink">
          <a href="https://github.com/YubalHormiga" target="_blank">GitHub</a>
        </div>
      </div>
    </div>
    <div class="footerCredit">
      <h3>Yubal Hormiga {{ currentYear }}</h3>
    </div>
  </div>
</template>

<style scoped>
.footerContainer {
  display: flex;
  flex-direction: column;
  font-size: 2.4rem;
  margin: 5rem 0 3rem 0;
}
@media (min-width: 768px) {
  .footerContainer {
    flex-direction: row;
    justify-content: space-between;
  }
}

.aboutSection {
  display: flex;
  flex-direction: column;
  margin-bottom: 2rem;
  gap: 2rem;
}
@media (min-width: 768px) {
  .aboutSection {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }
}
.footerCredit h3 {
  font-size: 2.4rem;
  display: flex;
  gap: 0.5rem;
}
.footerCredit h3::before {
  content: '©';
  font-size: 3rem;
  margin-right: 0.5rem;
}
.footerCredit {
  margin-top: 3rem;
}
@media (min-width: 768px) {
  .footerCredit {
    margin-top: 0;
  }
}
a {
  text-decoration: none;
}
</style>



--- File: views\MainView.vue ---

<script setup>
import ProjectOverviewSection from '@/components/ProjectOverviewSection.vue'
</script>

<template>
  <ProjectOverviewSection />
</template>
<style scoped></style>

